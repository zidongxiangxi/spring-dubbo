#发布的时候要把stdout去掉
log4j.rootLogger=info,A1,A2,A3

### 输出到控制台，打印 info 级别信息 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d [%-5p] %l - %m%n
log4j.appender.stdout.Threshold = debug

###### 输出到文件，装  info 级别信息 #####
log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A1.File=${catalina.home}/logs/xdchen/info/xdchen.log
log4j.appender.A1.DatePattern='.'yyyy-MM-dd
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d [%-5p] %l - %m%n
log4j.appender.A1.Threshold = info

###### 输出到文件，装  warn 级别信息 #####
log4j.appender.A2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.A2.File = ${catalina.home}/logs/xdchen/info/xdchen.log
log4j.appender.A2.DatePattern='.'yyyy-MM-dd
log4j.appender.A2.layout = org.apache.log4j.PatternLayout
log4j.appender.A2.layout.ConversionPattern = %d [%-5p] %l - %m%n
log4j.appender.A2.Threshold = warn

###### 输出到文件，装  error 级别信息 #####
log4j.appender.A3=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A3.File=${catalina.home}/logs/ybj_fe/error/ybj_fe_log.log
log4j.appender.A3.DatePattern='.'yyyy-MM-dd
log4j.appender.A3.layout=org.apache.log4j.PatternLayout
log4j.appender.A3.layout.ConversionPattern=%d [%-5p] %l - %m%n
log4j.appender.A3.Threshold = error

#关于日志系统的设计#####
#背景：
#第三方的框架(sshm)中有很多跟我们用了相同的日志工具(slf4j/log4j)，他们用debug级别输入排查和调试的日志，所以我们的系统要用高一个等级的 info级别来输出日志，否则会连他们的的日志一起打印出来，非常多。
#设计：
#需要排查问题的，在代码中使用logger.info()进行记录。    (*开发中要查看)
#需要排查问题，但是是在生产环境中保留的，用logger.warn()   (*生产中保留)
#如果是错误，代码中使用logger.error()进行记录
#举例：
#DebugIntercetor类中拦截，只是为了开发过程中容易查看出问题，这个用logger.info()
#LogAspect会记录前端请求后端的日志，生产出问题也要查看，可以用logger.warn()
#对于try-catch中的，可以用logger.error，这个一般在ControllerExceptionAdvice进行集中的异常记录了
#####################

